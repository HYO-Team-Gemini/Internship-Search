{"version":3,"sources":["components/JobPostingCard.js","components/JobGrid.js","components/JobTable.js","App.js","serviceWorker.js","index.js"],"names":["JobPostingCard","props","job","date","moment","format","location","city","state","Card","className","Body","Title","name","Badge","variant","Subtitle","employer","Text","Footer","Link","target","rel","href","link","JobGrid","jobs","CardDeck","map","i","key","JobTable","jobRows","Table","responsive","striped","bordered","hover","App","useState","setJobs","setName","setEmployer","distance","setDistance","zipCode","setZipCode","setCity","setState","displayMessage","setDisplayMessage","currentPage","setCurrentPage","toggle","setToggle","locationInput","setLocationInput","getData","pageNumber","query","toLowerCase","parseInt","page","console","log","axios","get","url","params","then","response","jobResults","values","data","length","catch","error","getPage","pageChange","Container","fluid","Form","onSubmit","e","preventDefault","Row","Group","as","Col","lg","Label","Control","type","value","onChange","placeholder","disabled","Button","onClick","isSearchDisabled","Alert","id","htmlFor","checked","readOnly","Pagination","Prev","window","scrollTo","top","behavior","Next","Boolean","hostname","match","ReactDOM","render","StrictMode","integrity","crossOrigin","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ff4e52ce.chunk.js","sourcesContent":["import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Badge from 'react-bootstrap/Badge';\nimport moment from 'moment';\nimport './JobPostingCard.css';\n\nconst JobPostingCard = (props) => {\n    const job = props.job;\n    const date = moment(job.date).format(\"M/D/YY\");\n    const location = (job.city ? job.city : \"\") + (job.state ? \", \" + job.state : \"\");\n\n    return (\n        <Card className=\"job-posting\">\n            <Card.Body>\n                <Card.Title className=\"row\">\n                    <div className=\"col-md-8\">\n                        {job.name}\n                    </div>\n                    <div className=\"col-md-4\">\n                        <Badge variant=\"secondary\" className=\"date-badge\">{date}</Badge>\n                    </div>\n                </Card.Title>\n                <Card.Subtitle className=\"mb-2 text-muted\">{job.employer}</Card.Subtitle>\n                <Card.Text>{location ? \"Location: \" + location : \"\"}</Card.Text>\n            </Card.Body>\n            <Card.Footer>\n                <Card.Link target=\"_blank\" rel=\"noopener noreferrer\" href={job.link}>Link</Card.Link>\n            </Card.Footer>\n        </Card>\n    );\n}\n\nexport default JobPostingCard;","import React from 'react';\nimport JobPostingCard from './JobPostingCard.js';\nimport CardDeck from 'react-bootstrap/CardDeck';\nimport './JobGrid.css';\n\nconst JobGrid = (props) => {\n    const jobs = props.jobs;\n\n    return (\n        <CardDeck className=\"jobs-grid\">\n            {jobs.map((job, i) => <JobPostingCard key={i} job={job} />)}\n        </CardDeck>\n    );\n}\n\nexport default JobGrid;","import React from 'react';\nimport Table from 'react-bootstrap/Table';\nimport moment from 'moment';\nimport './JobTable.css';\n\nconst JobTable = (props) => {\n    const jobs = props.jobs;\n\n    const jobRows = jobs.map((job, i) => {\n        const date = moment(job.date).format(\"M/D/YY\");\n        const location = (job.city ? job.city : \"\") + (job.state ? \", \" + job.state : \"\");\n\n        return (\n            <tr key={i}>\n                <td>{job.name}</td>\n                <td>{job.employer}</td>\n                <td>{location}</td>\n                <td>{date}</td>\n                <td><a className=\"external\" href={job.link} target=\"_blank\" rel=\"noopener noreferrer\">Go</a></td>\n            </tr>\n        )\n    });\n\n    return (\n        <Table responsive striped bordered hover variant=\"dark\">\n            <thead>\n                <tr>\n                    <th>Name</th>\n                    <th>Company</th>\n                    <th>Location</th>\n                    <th>Date</th>\n                    <th>Link</th>\n                </tr>\n            </thead>\n            <tbody>{jobRows}</tbody>\n        </Table>\n    );\n}\n\nexport default JobTable;","import React, { useState } from 'react';\nimport axios from 'axios';\nimport values from 'lodash/values';\nimport JobGrid from './components/JobGrid.js';\nimport JobTable from './components/JobTable.js';\nimport { Container, Col, Form, Button, Alert, Pagination } from 'react-bootstrap';\nimport './App.css';\n\nfunction App() {\n  const [jobs, setJobs] = useState([]);\n  const [name, setName] = useState(\"\");\n  const [employer, setEmployer] = useState(\"\");\n  const [distance, setDistance] = useState(\"\");\n  const [zipCode, setZipCode] = useState(\"\");\n  const [city, setCity] = useState(\"\");\n  const [state, setState] = useState(\"\");\n  const [displayMessage, setDisplayMessage] = useState(\"\");\n  const [currentPage, setCurrentPage] = useState(0);\n\n  // 0 is table view, 1 is card view\n  const [toggle, setToggle] = useState(0);\n  \n  // \"zipCode\" is for zip code input, \"cityState\" is for city / state input\n  const [locationInput, setLocationInput] = useState(\"\");\n\n  const url = \"https://gemini-jobs.herokuapp.com\";\n\n  const getData = (pageNumber) => {\n    let query = {\n      name,\n      employer: employer.toLowerCase(),\n      distance: distance ? parseInt(distance) : 0,\n      page: pageNumber\n    };\n\n    if (locationInput === \"cityState\") {\n      query[\"city\"] = city;\n      query[\"state\"] = state;\n    }\n    else if (locationInput === \"zipCode\") {\n      query[\"zipcode\"] = zipCode ? parseInt(zipCode): 0;\n    }\n\n    console.log(query);\n\n    axios.get(url + \"/jobs\", { params: query })\n      .then(response => {\n        const jobResults = values(response.data.jobs);\n        if (jobResults.length > 0) {\n          setJobs(jobResults);\n          setDisplayMessage(\"\");\n        }\n        else {\n          setJobs([]);\n          setDisplayMessage(\"No Results Found\");\n        }\n      })\n      .catch(error => {\n        setJobs([]);\n        console.log(error);\n        setDisplayMessage(\"Error Retrieving Results\")\n      });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const pageNumber = 1;\n    getData(pageNumber);\n    setCurrentPage(pageNumber);\n  };\n\n  const getPage = (pageChange) => {\n    const pageNumber = currentPage + pageChange;\n    getData(pageNumber);\n    setCurrentPage(pageNumber);\n  };\n\n  const handleToggleChange = () => {\n    const newToggleValue = toggle === 0 ? 1 : 0;\n    setToggle(newToggleValue);\n  };\n\n  const resetAllFields = () => {\n    setName(\"\");\n    setEmployer(\"\");\n    setDistance(\"\");\n    setZipCode(\"\");\n    setCity(\"\");\n    setState(\"\");\n    setLocationInput(\"\");\n  };\n\n  const isSearchDisabled = () => {\n    if (city || state || zipCode || distance) {\n      if (locationInput === \"cityState\") return !(city && state && distance);\n      else if (locationInput === \"zipCode\") return !(zipCode && distance);\n    }\n    return false;\n  };\n\n  return (\n    <div className=\"App\">\n      <Container fluid className=\"search-bar\">\n        <Form className=\"search-form\" onSubmit={handleSubmit}>\n          <Form.Row>\n            <Form.Group as={Col} lg={6}>\n              <Form.Label>Keywords</Form.Label>\n              <Form.Control type=\"text\" value={name} onChange={e => setName(e.target.value)}\n                            placeholder=\"Search by title or skill\" />\n            </Form.Group>\n            <Form.Group as={Col} lg={6}>\n                <Form.Label>Employer</Form.Label>\n                <Form.Control type=\"text\" value={employer} onChange={e => setEmployer(e.target.value)}\n                              placeholder=\"Ex: Google\" />\n            </Form.Group>\n            <Form.Group as={Col} lg={3}>\n              <Form.Label>City</Form.Label>\n              <Form.Control type=\"text\" value={city} \n                            onChange={e => { setLocationInput(\"cityState\"); setCity(e.target.value); }}\n                            placeholder=\"Ex: Austin\" disabled={locationInput === \"zipCode\"} />\n            </Form.Group>\n            <Form.Group as={Col} lg={3}>\n              <Form.Label>State</Form.Label>\n              <Form.Control type=\"text\" value={state} \n                            onChange={e => { setLocationInput(\"cityState\"); setState(e.target.value); }}\n                            placeholder=\"Ex: Texas\" disabled={locationInput === \"zipCode\"} />\n            </Form.Group>\n            <Form.Group as={Col} lg={2}>\n              <Form.Label>Zip Code</Form.Label>\n              <Form.Control type=\"number\" value={zipCode} \n                            onChange={e => { setLocationInput(\"zipCode\"); setZipCode(e.target.value); }}\n                            placeholder=\"Ex: 73301\" disabled={locationInput === \"cityState\"} />\n            </Form.Group>\n            <Form.Group as={Col} lg={2}>\n              <Form.Label>Distance (radius)</Form.Label>\n              <Form.Control type=\"number\" value={distance} onChange={e => setDistance(e.target.value)}\n                            placeholder=\"Ex: 15 (miles)\" />\n            </Form.Group>\n            <Form.Group as={Col} lg className=\"d-flex flex-column justify-content-end\">\n              <Button variant=\"outline-primary\" onClick={() => resetAllFields()}>Clear</Button>\n            </Form.Group>\n            <Form.Group as={Col} lg className=\"d-flex flex-column justify-content-end\">\n              <Button type=\"submit\" value=\"Submit\"\n                      disabled={isSearchDisabled()}>\n                Search\n              </Button>\n            </Form.Group>\n          </Form.Row>\n        </Form>\n      </Container>\n      <Container fluid className=\"job-results\">\n        { displayMessage && <Alert variant=\"secondary\" className=\"display-message\">{displayMessage}</Alert>}\n        { jobs.length > 0 &&\n          <div className=\"results-toggle-row\">\n            <div className=\"results-text\">\n              Results {(currentPage-1) * 50 + 1} - {(currentPage-1) * 50 + jobs.length}\n            </div>\n            <div className=\"custom-control custom-switch\">\n              <label className=\"toggle-label\" id=\"left-toggle-label\" htmlFor=\"toggle\">\n                Table View\n              </label>\n              <input\n                type=\"checkbox\"\n                className=\"custom-control-input\"\n                id=\"toggle\"\n                checked={toggle}\n                onChange={handleToggleChange}\n                readOnly\n              />\n              <label className=\"custom-control-label toggle-label\" id=\"right-toggle-label\" htmlFor=\"toggle\" >\n                Card View\n              </label>\n            </div>\n          </div>\n        }\n        { jobs.length > 0 && toggle === 0 && <JobTable jobs={jobs} /> }\n        { jobs.length > 0 && toggle === 1 && <JobGrid jobs={jobs} /> }\n        { jobs.length > 0 &&\n            <div className=\"pagination-row\">\n              <Pagination className=\"pages-element prev-page\">\n                <Pagination.Prev className={currentPage === 1 ? \"disabled\" : \"\"} \n                                 onClick={() => { window.scrollTo({top: 0, behavior: \"smooth\"}); getPage(-1); }}/>\n              </Pagination>\n              <Pagination className=\"pages-element next-page\">\n                <Pagination.Next className={jobs.length < 50 ? \"disabled\" : \"\"} \n                                 onClick={() => { window.scrollTo({top: 0, behavior: \"smooth\"}); getPage(1); }}/>\n              </Pagination>\n            </div>\n        }\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    <link\n        rel=\"stylesheet\"\n        href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\"\n        integrity=\"sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk\"\n        crossOrigin=\"anonymous\"\n    />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}